services:
  backend:
    container_name: fs-backend
    build: ./backend
    env_file: .env
    volumes:
      - ./backend:/app
    environment:
      - CELERY_BROKER_URL=${REDIS_URL}
      - CELERY_RESULT_BACKEND=${REDIS_URL}
      - MONGO_URI=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongo:27017/${MONGO_DB}
    ports:
      - "5001:5000"

  worker:
    container_name: fs-worker
    build: ./backend
    env_file: .env
    command: celery -A app.tasks worker --loglevel=info -E
    depends_on:
      - redis
      - mongo

  frontend:
    container_name: fs-frontend
    build: ./frontend
    env_file: .env
    environment:
      - VITE_API_URL=${VITE_API_URL}
    ports:
      - "3000:3000"
    depends_on:
      - backend

  redis:
    container_name: fs-redis
    image: redis:alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"

  mongo:
    container_name: fs-mongo
    image: mongo:4
    volumes:
      - mongo_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB}
    ports:
      - "27017:27017"

  flower:
    image: python:3.11-slim
    container_name: flower
    env_file:
      - ./.env
      - ./backend/.env
    # Montez votre code backend pour que Flower trouve app/tasks.py
    volumes:
      - ./backend:/app
    working_dir: /app
    depends_on:
      - redis
    ports:
      - "5555:5555"
    command: >
      sh -c "
        pip install --no-cache-dir -r requirements.txt flower &&
        celery -A app.tasks flower \
          --port=5555 \
          --broker=${REDIS_URL} \
          --url_prefix=/flower \
          --basic_auth=${FLOWER_USER}:${FLOWER_PASSWORD}
      "

volumes:
  mongo_data:
  redis_data: